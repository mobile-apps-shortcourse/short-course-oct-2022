// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: auth.proto

package ms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthSvcClient is the client API for AuthSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthSvcClient interface {
	CreateUser(ctx context.Context, in *CrowderUser, opts ...grpc.CallOption) (*CrowderUser, error)
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (AuthSvc_GetUserClient, error)
	UpdateUser(ctx context.Context, in *CrowderUser, opts ...grpc.CallOption) (*CrowderUser, error)
	DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (AuthSvc_GetUsersClient, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type authSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthSvcClient(cc grpc.ClientConnInterface) AuthSvcClient {
	return &authSvcClient{cc}
}

func (c *authSvcClient) CreateUser(ctx context.Context, in *CrowderUser, opts ...grpc.CallOption) (*CrowderUser, error) {
	out := new(CrowderUser)
	err := c.cc.Invoke(ctx, "/crowder.AuthSvc/createUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authSvcClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (AuthSvc_GetUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuthSvc_ServiceDesc.Streams[0], "/crowder.AuthSvc/getUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &authSvcGetUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuthSvc_GetUserClient interface {
	Recv() (*CrowderUser, error)
	grpc.ClientStream
}

type authSvcGetUserClient struct {
	grpc.ClientStream
}

func (x *authSvcGetUserClient) Recv() (*CrowderUser, error) {
	m := new(CrowderUser)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authSvcClient) UpdateUser(ctx context.Context, in *CrowderUser, opts ...grpc.CallOption) (*CrowderUser, error) {
	out := new(CrowderUser)
	err := c.cc.Invoke(ctx, "/crowder.AuthSvc/updateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authSvcClient) DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/crowder.AuthSvc/deleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authSvcClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (AuthSvc_GetUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuthSvc_ServiceDesc.Streams[1], "/crowder.AuthSvc/getUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &authSvcGetUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuthSvc_GetUsersClient interface {
	Recv() (*GetUsersResponse, error)
	grpc.ClientStream
}

type authSvcGetUsersClient struct {
	grpc.ClientStream
}

func (x *authSvcGetUsersClient) Recv() (*GetUsersResponse, error) {
	m := new(GetUsersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authSvcClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/crowder.AuthSvc/login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthSvcServer is the server API for AuthSvc service.
// All implementations must embed UnimplementedAuthSvcServer
// for forward compatibility
type AuthSvcServer interface {
	CreateUser(context.Context, *CrowderUser) (*CrowderUser, error)
	GetUser(*UserRequest, AuthSvc_GetUserServer) error
	UpdateUser(context.Context, *CrowderUser) (*CrowderUser, error)
	DeleteUser(context.Context, *UserRequest) (*AuthResponse, error)
	GetUsers(*GetUsersRequest, AuthSvc_GetUsersServer) error
	Login(context.Context, *LoginRequest) (*AuthResponse, error)
	mustEmbedUnimplementedAuthSvcServer()
}

// UnimplementedAuthSvcServer must be embedded to have forward compatible implementations.
type UnimplementedAuthSvcServer struct {
}

func (UnimplementedAuthSvcServer) CreateUser(context.Context, *CrowderUser) (*CrowderUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAuthSvcServer) GetUser(*UserRequest, AuthSvc_GetUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAuthSvcServer) UpdateUser(context.Context, *CrowderUser) (*CrowderUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAuthSvcServer) DeleteUser(context.Context, *UserRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAuthSvcServer) GetUsers(*GetUsersRequest, AuthSvc_GetUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedAuthSvcServer) Login(context.Context, *LoginRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthSvcServer) mustEmbedUnimplementedAuthSvcServer() {}

// UnsafeAuthSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthSvcServer will
// result in compilation errors.
type UnsafeAuthSvcServer interface {
	mustEmbedUnimplementedAuthSvcServer()
}

func RegisterAuthSvcServer(s grpc.ServiceRegistrar, srv AuthSvcServer) {
	s.RegisterService(&AuthSvc_ServiceDesc, srv)
}

func _AuthSvc_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrowderUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSvcServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowder.AuthSvc/createUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSvcServer).CreateUser(ctx, req.(*CrowderUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthSvc_GetUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthSvcServer).GetUser(m, &authSvcGetUserServer{stream})
}

type AuthSvc_GetUserServer interface {
	Send(*CrowderUser) error
	grpc.ServerStream
}

type authSvcGetUserServer struct {
	grpc.ServerStream
}

func (x *authSvcGetUserServer) Send(m *CrowderUser) error {
	return x.ServerStream.SendMsg(m)
}

func _AuthSvc_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrowderUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSvcServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowder.AuthSvc/updateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSvcServer).UpdateUser(ctx, req.(*CrowderUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthSvc_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSvcServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowder.AuthSvc/deleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSvcServer).DeleteUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthSvc_GetUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthSvcServer).GetUsers(m, &authSvcGetUsersServer{stream})
}

type AuthSvc_GetUsersServer interface {
	Send(*GetUsersResponse) error
	grpc.ServerStream
}

type authSvcGetUsersServer struct {
	grpc.ServerStream
}

func (x *authSvcGetUsersServer) Send(m *GetUsersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AuthSvc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSvcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowder.AuthSvc/login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSvcServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthSvc_ServiceDesc is the grpc.ServiceDesc for AuthSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crowder.AuthSvc",
	HandlerType: (*AuthSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createUser",
			Handler:    _AuthSvc_CreateUser_Handler,
		},
		{
			MethodName: "updateUser",
			Handler:    _AuthSvc_UpdateUser_Handler,
		},
		{
			MethodName: "deleteUser",
			Handler:    _AuthSvc_DeleteUser_Handler,
		},
		{
			MethodName: "login",
			Handler:    _AuthSvc_Login_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getUser",
			Handler:       _AuthSvc_GetUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getUsers",
			Handler:       _AuthSvc_GetUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "auth.proto",
}
